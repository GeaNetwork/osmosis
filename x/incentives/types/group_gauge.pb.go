// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/incentives/group_gauge.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "github.com/osmosis-labs/osmosis/v17/x/lockup/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SplittingPolicy determines the way we want to split incentives in groupGauges
type SplittingPolicy int32

const (
	Volume SplittingPolicy = 0
	Evenly SplittingPolicy = 1
)

var SplittingPolicy_name = map[int32]string{
	0: "Volume",
	1: "Evenly",
}

var SplittingPolicy_value = map[string]int32{
	"Volume": 0,
	"Evenly": 1,
}

func (x SplittingPolicy) String() string {
	return proto.EnumName(SplittingPolicy_name, int32(x))
}

func (SplittingPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_693357a19afe66cf, []int{0}
}

// Note that while both InternalGaugeInfo and InternalGaugeRecord could
// technically be replaced by DistrInfo and DistrRecord from the pool-incentives
// module, we create separate types here to keep our abstractions clean and
// readable (pool-incentives distribution abstractions are used in a very
// specific way that does not directly relate to gauge logic). This also helps
// us sidestep a refactor to avoid an import cycle.
type InternalGaugeInfo struct {
	TotalWeight  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=total_weight,json=totalWeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_weight" yaml:"total_weight"`
	GaugeRecords []InternalGaugeRecord                  `protobuf:"bytes,2,rep,name=gauge_records,json=gaugeRecords,proto3" json:"gauge_records"`
}

func (m *InternalGaugeInfo) Reset()         { *m = InternalGaugeInfo{} }
func (m *InternalGaugeInfo) String() string { return proto.CompactTextString(m) }
func (*InternalGaugeInfo) ProtoMessage()    {}
func (*InternalGaugeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_693357a19afe66cf, []int{0}
}
func (m *InternalGaugeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalGaugeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalGaugeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalGaugeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalGaugeInfo.Merge(m, src)
}
func (m *InternalGaugeInfo) XXX_Size() int {
	return m.Size()
}
func (m *InternalGaugeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalGaugeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_InternalGaugeInfo proto.InternalMessageInfo

func (m *InternalGaugeInfo) GetGaugeRecords() []InternalGaugeRecord {
	if m != nil {
		return m.GaugeRecords
	}
	return nil
}

type InternalGaugeRecord struct {
	GaugeId uint64                                 `protobuf:"varint,1,opt,name=gauge_id,json=gaugeId,proto3" json:"gauge_id,omitempty" yaml:"gauge_id"`
	Weight  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"weight"`
}

func (m *InternalGaugeRecord) Reset()         { *m = InternalGaugeRecord{} }
func (m *InternalGaugeRecord) String() string { return proto.CompactTextString(m) }
func (*InternalGaugeRecord) ProtoMessage()    {}
func (*InternalGaugeRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_693357a19afe66cf, []int{1}
}
func (m *InternalGaugeRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalGaugeRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalGaugeRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalGaugeRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalGaugeRecord.Merge(m, src)
}
func (m *InternalGaugeRecord) XXX_Size() int {
	return m.Size()
}
func (m *InternalGaugeRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalGaugeRecord.DiscardUnknown(m)
}

var xxx_messageInfo_InternalGaugeRecord proto.InternalMessageInfo

func (m *InternalGaugeRecord) GetGaugeId() uint64 {
	if m != nil {
		return m.GaugeId
	}
	return 0
}

// Gauge is an object that stores GroupGaugeId as well as internalGaugeIds. We
// linked these two together so that we can distribute tokens from groupGauge to
// internalGauges.
type GroupGauge struct {
	GroupGaugeId      uint64            `protobuf:"varint,1,opt,name=group_gauge_id,json=groupGaugeId,proto3" json:"group_gauge_id,omitempty"`
	InternalGaugeInfo InternalGaugeInfo `protobuf:"bytes,2,opt,name=internal_gauge_info,json=internalGaugeInfo,proto3" json:"internal_gauge_info"`
	SplittingPolicy   SplittingPolicy   `protobuf:"varint,3,opt,name=splitting_policy,json=splittingPolicy,proto3,enum=osmosis.incentives.SplittingPolicy" json:"splitting_policy,omitempty"`
}

func (m *GroupGauge) Reset()         { *m = GroupGauge{} }
func (m *GroupGauge) String() string { return proto.CompactTextString(m) }
func (*GroupGauge) ProtoMessage()    {}
func (*GroupGauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_693357a19afe66cf, []int{2}
}
func (m *GroupGauge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupGauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupGauge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupGauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupGauge.Merge(m, src)
}
func (m *GroupGauge) XXX_Size() int {
	return m.Size()
}
func (m *GroupGauge) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupGauge.DiscardUnknown(m)
}

var xxx_messageInfo_GroupGauge proto.InternalMessageInfo

func (m *GroupGauge) GetGroupGaugeId() uint64 {
	if m != nil {
		return m.GroupGaugeId
	}
	return 0
}

func (m *GroupGauge) GetInternalGaugeInfo() InternalGaugeInfo {
	if m != nil {
		return m.InternalGaugeInfo
	}
	return InternalGaugeInfo{}
}

func (m *GroupGauge) GetSplittingPolicy() SplittingPolicy {
	if m != nil {
		return m.SplittingPolicy
	}
	return Volume
}

func init() {
	proto.RegisterEnum("osmosis.incentives.SplittingPolicy", SplittingPolicy_name, SplittingPolicy_value)
	proto.RegisterType((*InternalGaugeInfo)(nil), "osmosis.incentives.InternalGaugeInfo")
	proto.RegisterType((*InternalGaugeRecord)(nil), "osmosis.incentives.InternalGaugeRecord")
	proto.RegisterType((*GroupGauge)(nil), "osmosis.incentives.GroupGauge")
}

func init() {
	proto.RegisterFile("osmosis/incentives/group_gauge.proto", fileDescriptor_693357a19afe66cf)
}

var fileDescriptor_693357a19afe66cf = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xf5, 0xb4, 0x51, 0xbe, 0x8f, 0x49, 0x68, 0x52, 0x87, 0x45, 0xc8, 0xc2, 0x8e, 0x4c, 0x81,
	0x08, 0xa9, 0x1e, 0x25, 0x48, 0x20, 0x75, 0x19, 0xa9, 0x54, 0xd9, 0xa0, 0xca, 0x48, 0x20, 0xc1,
	0x22, 0xf2, 0xcf, 0x64, 0x32, 0xea, 0x78, 0xc6, 0xf2, 0x8c, 0x03, 0x79, 0x03, 0x96, 0x48, 0xbc,
	0x00, 0x12, 0x2f, 0xd3, 0x65, 0xd9, 0x21, 0x16, 0x01, 0x25, 0x1b, 0xd6, 0x7d, 0x02, 0xe4, 0x89,
	0xdd, 0xa6, 0x3f, 0x12, 0x62, 0x35, 0xf7, 0xce, 0x3d, 0xbe, 0xf7, 0x9c, 0x33, 0xd7, 0x70, 0x4f,
	0xc8, 0x58, 0x48, 0x2a, 0x11, 0xe5, 0x21, 0xe6, 0x8a, 0xce, 0xb0, 0x44, 0x24, 0x15, 0x59, 0x32,
	0x26, 0x7e, 0x46, 0xb0, 0x9b, 0xa4, 0x42, 0x09, 0xd3, 0x2c, 0x50, 0xee, 0x25, 0xaa, 0x73, 0x8f,
	0x08, 0x22, 0x74, 0x19, 0xe5, 0xd1, 0x1a, 0xd9, 0xb1, 0x88, 0x10, 0x84, 0x61, 0xa4, 0xb3, 0x20,
	0x9b, 0xa0, 0x28, 0x4b, 0x7d, 0x45, 0x05, 0x2f, 0xea, 0xf6, 0xf5, 0xba, 0xa2, 0x31, 0x96, 0xca,
	0x8f, 0x93, 0xb2, 0x41, 0xa8, 0x67, 0xa1, 0xc0, 0x97, 0x18, 0xcd, 0xfa, 0x01, 0x56, 0x7e, 0x1f,
	0x85, 0x82, 0x96, 0x0d, 0xee, 0x97, 0x84, 0x99, 0x08, 0x4f, 0xb2, 0x44, 0x1f, 0xeb, 0x92, 0xf3,
	0x0d, 0xc0, 0xdd, 0x11, 0x57, 0x38, 0xe5, 0x3e, 0x3b, 0xca, 0xd9, 0x8f, 0xf8, 0x44, 0x98, 0x53,
	0x58, 0x57, 0x42, 0xf9, 0x6c, 0xfc, 0x1e, 0x53, 0x32, 0x55, 0x6d, 0xd0, 0x05, 0xbd, 0x3b, 0xc3,
	0xc3, 0xd3, 0x85, 0x6d, 0xfc, 0x58, 0xd8, 0x8f, 0x08, 0x55, 0xd3, 0x2c, 0x70, 0x43, 0x11, 0xa3,
	0x62, 0xf2, 0xfa, 0xd8, 0x97, 0xd1, 0x09, 0x52, 0xf3, 0x04, 0x4b, 0x77, 0xc4, 0xd5, 0xf9, 0xc2,
	0x6e, 0xcd, 0xfd, 0x98, 0x1d, 0x38, 0x9b, 0xbd, 0x1c, 0xaf, 0xa6, 0xd3, 0x37, 0x3a, 0x33, 0x3d,
	0x78, 0x57, 0x9b, 0x36, 0x4e, 0x71, 0x28, 0xd2, 0x48, 0xb6, 0xb7, 0xba, 0xdb, 0xbd, 0xda, 0xe0,
	0xb1, 0x7b, 0xd3, 0x3d, 0xf7, 0x0a, 0x4f, 0x4f, 0xe3, 0x87, 0x95, 0x9c, 0x93, 0x57, 0x27, 0x97,
	0x57, 0xd2, 0xf9, 0x0c, 0x60, 0xeb, 0x16, 0xac, 0xe9, 0xc2, 0xff, 0xd7, 0xb3, 0x68, 0xa4, 0x15,
	0x55, 0x86, 0xad, 0xf3, 0x85, 0xdd, 0x58, 0x73, 0x2c, 0x2b, 0x8e, 0xf7, 0x9f, 0x0e, 0x47, 0x91,
	0xf9, 0x02, 0x56, 0x0b, 0xfd, 0x5b, 0x5a, 0xbf, 0xfb, 0x6f, 0xfa, 0xbd, 0xe2, 0xeb, 0x83, 0xca,
	0xef, 0x2f, 0x36, 0x70, 0x7e, 0x02, 0x08, 0x8f, 0xf2, 0x2d, 0xd1, 0x94, 0xcc, 0x3d, 0xb8, 0xb3,
	0xb1, 0x33, 0x17, 0x94, 0xbc, 0x3a, 0xb9, 0xc0, 0x8c, 0x22, 0xf3, 0x1d, 0x6c, 0xd1, 0x42, 0x49,
	0x09, 0xe4, 0x13, 0xa1, 0xf9, 0xd4, 0x06, 0x0f, 0xff, 0x6a, 0x52, 0xfe, 0x98, 0x85, 0x45, 0xbb,
	0xf4, 0xc6, 0x2b, 0xbf, 0x84, 0x4d, 0x99, 0x30, 0xaa, 0x14, 0xe5, 0x64, 0x9c, 0x08, 0x46, 0xc3,
	0x79, 0x7b, 0xbb, 0x0b, 0x7a, 0x3b, 0x83, 0x07, 0xb7, 0x75, 0x7e, 0x55, 0x62, 0x8f, 0x35, 0xd4,
	0x6b, 0xc8, 0xab, 0x17, 0x4f, 0x10, 0x6c, 0x5c, 0xc3, 0x98, 0x10, 0x56, 0x5f, 0x0b, 0x96, 0xc5,
	0xb8, 0x69, 0xe4, 0xf1, 0xe1, 0x0c, 0x73, 0x36, 0x6f, 0x82, 0x4e, 0xe5, 0xe3, 0x57, 0xcb, 0x18,
	0x1e, 0x9f, 0x2e, 0x2d, 0x70, 0xb6, 0xb4, 0xc0, 0xaf, 0xa5, 0x05, 0x3e, 0xad, 0x2c, 0xe3, 0x6c,
	0x65, 0x19, 0xdf, 0x57, 0x96, 0xf1, 0xf6, 0xd9, 0x86, 0xc5, 0x05, 0x95, 0x7d, 0xe6, 0x07, 0xb2,
	0x4c, 0xd0, 0xac, 0xff, 0x1c, 0x7d, 0xd8, 0xfc, 0x01, 0xb5, 0xed, 0x41, 0x55, 0x6f, 0xf5, 0xd3,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68, 0x67, 0x5a, 0xf9, 0xa3, 0x03, 0x00, 0x00,
}

func (this *InternalGaugeRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InternalGaugeRecord)
	if !ok {
		that2, ok := that.(InternalGaugeRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GaugeId != that1.GaugeId {
		return false
	}
	if !this.Weight.Equal(that1.Weight) {
		return false
	}
	return true
}
func (m *InternalGaugeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalGaugeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalGaugeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GaugeRecords) > 0 {
		for iNdEx := len(m.GaugeRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GaugeRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroupGauge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.TotalWeight.Size()
		i -= size
		if _, err := m.TotalWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGroupGauge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *InternalGaugeRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalGaugeRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalGaugeRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGroupGauge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.GaugeId != 0 {
		i = encodeVarintGroupGauge(dAtA, i, uint64(m.GaugeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupGauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupGauge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupGauge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SplittingPolicy != 0 {
		i = encodeVarintGroupGauge(dAtA, i, uint64(m.SplittingPolicy))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.InternalGaugeInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGroupGauge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.GroupGaugeId != 0 {
		i = encodeVarintGroupGauge(dAtA, i, uint64(m.GroupGaugeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroupGauge(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroupGauge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InternalGaugeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalWeight.Size()
	n += 1 + l + sovGroupGauge(uint64(l))
	if len(m.GaugeRecords) > 0 {
		for _, e := range m.GaugeRecords {
			l = e.Size()
			n += 1 + l + sovGroupGauge(uint64(l))
		}
	}
	return n
}

func (m *InternalGaugeRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GaugeId != 0 {
		n += 1 + sovGroupGauge(uint64(m.GaugeId))
	}
	l = m.Weight.Size()
	n += 1 + l + sovGroupGauge(uint64(l))
	return n
}

func (m *GroupGauge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupGaugeId != 0 {
		n += 1 + sovGroupGauge(uint64(m.GroupGaugeId))
	}
	l = m.InternalGaugeInfo.Size()
	n += 1 + l + sovGroupGauge(uint64(l))
	if m.SplittingPolicy != 0 {
		n += 1 + sovGroupGauge(uint64(m.SplittingPolicy))
	}
	return n
}

func sovGroupGauge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroupGauge(x uint64) (n int) {
	return sovGroupGauge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InternalGaugeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalGaugeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalGaugeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupGauge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroupGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroupGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GaugeRecords = append(m.GaugeRecords, InternalGaugeRecord{})
			if err := m.GaugeRecords[len(m.GaugeRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroupGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroupGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalGaugeRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalGaugeRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalGaugeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeId", wireType)
			}
			m.GaugeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GaugeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupGauge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroupGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroupGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupGauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupGauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupGauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupGaugeId", wireType)
			}
			m.GroupGaugeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupGaugeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalGaugeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroupGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroupGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InternalGaugeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplittingPolicy", wireType)
			}
			m.SplittingPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SplittingPolicy |= SplittingPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroupGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroupGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroupGauge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroupGauge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupGauge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupGauge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroupGauge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGroupGauge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGroupGauge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGroupGauge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroupGauge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGroupGauge = fmt.Errorf("proto: unexpected end of group")
)
